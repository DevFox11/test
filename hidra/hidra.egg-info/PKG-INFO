Metadata-Version: 2.4
Name: hidra
Version: 0.1.0
Summary: A lightweight multitenancy library for Python APIs
Author-email: Hamilton Pati√±o Solano <hamiltonpatinosolano@gmail.com>
Keywords: multitenancy,fastapi,sqlalchemy,tenancy
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: sqlalchemy>=1.4.0
Provides-Extra: fastapi
Requires-Dist: fastapi>=0.68.0; extra == "fastapi"
Requires-Dist: starlette>=0.14.0; extra == "fastapi"
Provides-Extra: flask
Requires-Dist: flask>=2.0.0; extra == "flask"
Requires-Dist: werkzeug>=2.0.0; extra == "flask"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.15.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Dynamic: license-file

# Hidra Multitenancy: Lightweight Multi-Tenancy for Python

Hidra is a lightweight, framework-agnostic library for building multi-tenant applications in Python. It provides a simple and flexible way to manage tenants, allowing you to isolate tenant data using different strategies.

[![PyPI version](https://badge.fury.io/py/hidra-multitenancy.svg)](https://badge.fury.io/py/hidra-multitenancy)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## Key Features

- **Framework-Agnostic:** Designed to work with any Python web framework.
- **Multiple Tenancy Strategies:**
    - `DATABASE_PER_TENANT`: Each tenant has a separate database.
    - `SCHEMA_PER_TENANT`: Each tenant has a separate schema within the same database.
    - `ROW_LEVEL`: All tenants share the same database and tables, with data isolated by a tenant identifier column.
- **Context-Aware:** Uses `contextvars` to safely manage the current tenant's context, making it suitable for asynchronous applications.
- **Extensible:** Easily extendable to support custom tenancy strategies and tenant identification methods.
- **Optional Framework Integrations:** Provides optional, ready-to-use middlewares and decorators for FastAPI and Flask.

## Installation

Install the library using `pip`:

```bash
# Core library
pip install hidra-multitenancy

# To include optional dependencies for FastAPI
pip install hidra-multitenancy[fastapi]

# To include optional dependencies for Flask
pip install hidra-multitenancy[flask]

# For development (includes testing and linting tools)
pip install hidra-multitenancy[dev]
```

## Basic Usage (with FastAPI)

Here's a quick example of how to use Hidra with FastAPI.

### 1. Configure Tenants

First, configure your tenants and the tenancy strategy.

```python
# main.py
from hidra import tenant_context, TenancyStrategy, MultiTenantManager

# Initialize the tenant manager
manager = MultiTenantManager()

# Configure individual tenants
manager.configure_tenant("tenant1", {"db_connection": "postgresql://user:pass@host/db1"})
manager.configure_tenant("tenant2", {"db_connection": "postgresql://user:pass@host/db2"})

# Set the default strategy
manager.set_default_strategy(TenancyStrategy.DATABASE_PER_TENANT)

# Set the manager in the global tenant context
tenant_context.tenant_manager = manager
```

### 2. Add the Middleware

The middleware identifies the tenant from the request (e.g., using a header) and sets it in the context.

```python
# main.py
from fastapi import FastAPI
from hidra.integrations.fastapi import TenantMiddleware, tenant_required

app = FastAPI()

# Add the middleware to your application
app.add_middleware(TenantMiddleware)

@app.get("/items")
@tenant_required
async def get_items():
    # The tenant is now available in the context
    current_tenant = tenant_context.require_tenant()
    
    # You can get tenant-specific configuration
    config = tenant_context.tenant_manager.get_tenant_config(current_tenant)
    
    return {"tenant_id": current_tenant, "db_connection": config.get("db_connection")}
```

### 3. Run the Application

To run this example, you would make a request with the `X-Tenant-ID` header:

```bash
curl -X GET "http://127.0.0.1:8000/items" -H "X-Tenant-ID: tenant1"
```

The response would be:

```json
{
  "tenant_id": "tenant1",
  "db_connection": "postgresql://user:pass@host/db1"
}
```

## Contributing

Contributions are welcome! If you find a bug or have a feature request, please open an issue. If you want to contribute code, please follow these steps:

1.  Fork the repository.
2.  Create a new branch for your feature or bug fix.
3.  Write your code and add tests.
4.  Ensure all tests pass and the code is formatted with `black` and linted with `ruff`.
5.  Submit a pull request.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
